/************************************************************
Flood Risk Zonation Model
Author: Sourav Dey
Description:
This script computes a Flood Risk Index (FRI) using a 
multi-parametric GIS model with:
  - Elevation (DEM)
  - Slope
  - Rainfall (CHIRPS)
  - Runoff (TerraClimate)
  - Land Use / Land Cover (ESA WorldCover)
*************************************************************/

// -----------------------------
// 1. AREA OF INTEREST (AOI)
// -----------------------------
//imported aoi
Map.centerObject(aoi, 7);

// -----------------------------
// 2. DATASETS
// -----------------------------
var dem = ee.Image('USGS/SRTMGL1_003').clip(aoi).rename('elevation');
var slope = ee.Terrain.slope(dem).rename('slope');

var rainfall = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')
  .filterDate('2020-06-01', '2020-09-30') // monsoon season
  .filterBounds(aoi)
  .select('precipitation')
  .sum()
  .rename('rainfall')
  .clip(aoi);

var runoff = ee.ImageCollection('IDAHO_EPSCOR/TERRACLIMATE')
  .filterDate('2020-06-01', '2020-09-30')
  .select('ro')
  .sum()
  .rename('runoff')
  .clip(aoi);

var lulc = ee.Image('ESA/WorldCover/v100/2020')
  .select('Map')
  .clip(aoi)
  .rename('lulc');

// -----------------------------
// 3. NORMALIZATION FUNCTION
// -----------------------------
function normalize(img, band) {
  var stats = img.reduceRegion({
    reducer: ee.Reducer.minMax(),
    geometry: aoi,
    scale: 1000,
    maxPixels: 1e13
  });
  var min = ee.Number(stats.get(band + '_min'));
  var max = ee.Number(stats.get(band + '_max'));
  var range = ee.Algorithms.If(max.subtract(min).eq(0), 1, max.subtract(min));

  return img
    .subtract(ee.Image.constant(min))
    .divide(ee.Image.constant(range))
    .rename(band + '_norm');
}

// -----------------------------
// 4. NORMALIZE ALL PARAMETERS
// -----------------------------
var elevNorm = normalize(dem, 'elevation');
var slopeNorm = normalize(slope, 'slope');
var rainNorm = normalize(rainfall, 'rainfall');
var runoffNorm = normalize(runoff, 'runoff');

// -----------------------------
// 5. LULC Reclassification (Runoff Potential)
// -----------------------------
// High runoff potential = 1 (urban/bare), low = 0 (forest/water)
var lulcRunoff = lulc.remap(
  [10,20,30,40,50,60,70,80,90,95,100],
  [0.1,0.2,0.2,0.3,0.8,0.7,0.6,0.4,0.1,0.1,0.9]
).rename('lulc_runoff');

// Normalize
var lulcNorm = normalize(lulcRunoff, 'lulc_runoff');

// -----------------------------
// 6. FLOOD RISK INDEX (Weighted Sum)
// -----------------------------
var weights = {
  elevation: 0.20,
  slope: 0.20,
  rainfall: 0.25,
  runoff: 0.20,
  lulc: 0.15
};

var fri = ee.Image(0)
  .add(elevNorm.multiply(weights.elevation))
  .add(slopeNorm.multiply(weights.slope))
  .add(rainNorm.multiply(weights.rainfall))
  .add(runoffNorm.multiply(weights.runoff))
  .add(lulcNorm.multiply(weights.lulc))
  .rename('FRI');

var friNorm = fri.unitScale(0,1).rename('FRI_norm');

// -----------------------------
// 7. CLASSIFICATION (5 Risk Levels)
// -----------------------------
var breaks = [0.2, 0.4, 0.6, 0.8];
var risk = friNorm.expression(
  "(b('FRI_norm') <= b0) ? 1" +
  ": (b('FRI_norm') <= b1) ? 2" +
  ": (b('FRI_norm') <= b2) ? 3" +
  ": (b('FRI_norm') <= b3) ? 4" +
  ": 5", {
    'b0': breaks[0],
    'b1': breaks[1],
    'b2': breaks[2],
    'b3': breaks[3]
}).rename('Risk_Class');

// -----------------------------
// 8. VISUALIZATION
// -----------------------------
Map.addLayer(aoi, {}, 'aoi');
Map.addLayer(dem, {min:0, max:6000, palette:['white','gray','black']}, 'Elevation (SRTM)');
Map.addLayer(slope, {min:0, max:60, palette:['lightgreen','orange','brown']}, 'Slope (deg)');
Map.addLayer(rainfall, {min:0, max:2000, palette:['lightblue','blue','darkblue']}, 'Rainfall (mm)');
Map.addLayer(runoff, {min:0, max:500, palette:['white','cyan','blue']}, 'Runoff');
Map.addLayer(lulc, {}, 'LULC (ESA WorldCover)');
Map.addLayer(friNorm, {min:0, max:1, palette:['green','yellow','orange','red']}, 'Flood Risk Index');
Map.addLayer(risk.selfMask().clip(aoi), {min:1, max:5, palette:['#2b7301','#ffd966','#f4b183','#f06c64','#a30202']}, 'Risk Classes');

// -----------------------------
// 9. AREA STATISTICS
// -----------------------------
var pixelArea = ee.Image.pixelArea().divide(1e6); // km²
var areas = ee.List.sequence(1,5).map(function(cls){
  cls = ee.Number(cls);
  var mask = risk.eq(cls);
  var area = pixelArea.updateMask(mask).reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: aoi,
    scale: 1000,
    maxPixels: 1e13
  });
  return ee.Feature(null, {'class': cls, 'area_km2': area.get('area')});
});
print('Area by Risk Class (km²):', ee.FeatureCollection(areas));

// -----------------------------
// 10. ADD LEGEND
// -----------------------------
var legend = ui.Panel({style: {position: 'bottom-left'}});
legend.add(ui.Label({value: 'Flood Risk Classes', style: {fontWeight: 'bold'}}));
var colors = ['#2b7301','#ffd966','#f4b183','#f06c64','#a30202'];
var names = ['Very Low','Low','Moderate','High','Very High'];
for (var i = 0; i < 5; i++) {
  legend.add(ui.Panel([
    ui.Label({style: {backgroundColor: colors[i], padding: '8px'}}),
    ui.Label(names[i])
  ], ui.Panel.Layout.Flow('horizontal')));
}
Map.add(legend);

// -----------------------------
// 11. EXPORT RESULTS
// -----------------------------
Export.image.toDrive({
  image: risk.toUint8(),
  description: 'Flood_Risk_Map',
  folder: 'GEE_FloodRisk',
  region: aoi,
  scale: 1000,
  maxPixels: 1e13
});
